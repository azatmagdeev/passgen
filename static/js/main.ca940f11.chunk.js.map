{"version":3,"sources":["components/Checkbox.js","components/Radio.js","lib/app-config.js","lib/functions.js","components/Form.js","components/ResultItem.js","components/Result.js","components/App.js","index.js"],"names":["Checkbox","props","checkbox","type","name","defaultChecked","checked","disabled","info","Radio","radio","value","init_radios","init_checkboxes","string","generatePassword","length","Error","checkParamsGeneratePassword","password","i","Math","floor","random","generateString","checkboxes","map","join","generatePasswords","find","r","Array","fill","copied","Form","setPasswords","useState","radios","id","onChange","form","document","querySelector","forEach","filter","ch","removeAttribute","click","onSubmit","e","preventDefault","className","o","ResultItem","passwords","style","width","readOnly","src","alt","title","onClick","target","parentElement","select","execCommand","p","Result","App","ReactDOM","render","StrictMode","getElementById","window","addEventListener","navigator","serviceWorker","register","then","registration","console","log","catch","error"],"mappings":"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","file":"static/js/main.ca940f11.chunk.js","sourcesContent":["import React from 'react'\n\n/**\n * компонент инпут/чекбокс\n * выбор типов символов для пароля\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nfunction Checkbox(props) {\n    const {checkbox} = props;\n    return (\n        <p>\n            <label>\n                <input type=\"checkbox\"\n                       name={checkbox.name}\n                       defaultChecked={checkbox.checked}\n                       disabled={checkbox.disabled ?? false}/>\n                <span>{checkbox.info}</span>\n            </label>\n        </p>\n    )\n}\n\nexport default Checkbox","import React from 'react'\n\nexport default function Radio(props) {\n    const {radio} = props;\n    return (\n        <p>\n            <label>\n                <input name=\"pass_length\" type=\"radio\"\n                       value={radio.value}\n                       defaultChecked={radio.checked} />\n                <span>{radio.info}</span>\n            </label>\n        </p>\n    )\n}","export const passwords_count = 8;\n\nexport const init_radios = [\n    {\n        value: 8,\n        info: '8 знаков',\n        checked: true\n    },\n    {\n        value: 10,\n        info: '10 знаков',\n        checked: false\n    },\n    {\n        value: 15,\n        info: '15 знаков',\n        checked: false\n    },\n    {\n        value: 20,\n        info: '20 знаков',\n        checked: false\n    },\n];\n\nexport const init_checkboxes = [\n    {\n        name: 'en',\n        info: 'строчные (abc)',\n        checked: true,\n        string: 'abcdefghijklmnopqrstuvwxyz'\n    },\n    {\n        name: 'EN',\n        info: 'Заглавные (ABC)',\n        checked: true,\n        string: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    },\n    {\n        name: 'num',\n        info: 'цифры (123)',\n        checked: true,\n        string: '012345678901234567890123456789'\n    },\n    {\n        name: 'symb',\n        info: 'символы (!@#)',\n        checked: false,\n        string: '!@#$%^&*(){}[]_-+=?:~'\n    }\n];\n\n\n","import {init_checkboxes, passwords_count, init_radios} from \"./app-config\";\n\n/**\n * генерация рандомного пароля\n * @param string исходная строка возможных символов\n * @param length длина пароля\n * @returns {string}\n */\nexport function generatePassword(string, length) {\n\n    checkParamsGeneratePassword(string, length)\n\n    let password = '';\n    for (let i = 0; i < length; i++) {\n        const position = Math.floor(Math.random() * string.length);\n        password += string[position]\n    }\n    return password\n}\n\n/**\n * Проверка параметров для функции generatePassword()\n * @param string\n * @param length\n */\nfunction checkParamsGeneratePassword(string, length) {\n    if (typeof string !== 'string')\n        throw new Error('не верный тип параметра string, typeof string = ' + typeof string)\n    if (string === '')\n        throw new Error('параметр string не должен быть пустым')\n    if (typeof length !== 'number')\n        throw new Error('не верный тип параметра length, typeof string = ' + typeof length)\n    if (length < 0)\n        throw new Error('параметр length ожидается >= 0, фактически = ' + length)\n}\n\n/**\n * генерация исходной строки исходя из выбранных чекбоксов\n * @param checkboxes\n * @returns string\n */\nexport function generateString(checkboxes = init_checkboxes) {\n    return checkboxes.map(\n        checkbox => checkbox.checked ? checkbox.string : ''\n    ).join('');\n}\n\n/**\n * Генерирует список паролей c флагом - скопирован ли\n * @param string\n * @param length\n * @returns {{password: string, copied: boolean}[]}\n */\nexport function generatePasswords(\n    string = generateString(),\n    length = init_radios.find(r => r.checked === true).value\n) {\n    return Array(passwords_count).fill(null).map(\n        () => {\n            return {\n                password: generatePassword(string, length),\n                copied: false\n            }\n        }\n    );\n}","import React, {useState} from 'react'\nimport Checkbox from \"./Checkbox\"\nimport Radio from \"./Radio\"\nimport {init_checkboxes, init_radios} from \"../lib/app-config\"\nimport {generatePasswords, generateString} from \"../lib/functions\"\n\n/**\n * компонент формы с обработчиками изменения формы и нажатия кнопки\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nexport default function Form(props) {\n    const {setPasswords} = props\n    const [radios] = useState(init_radios)\n    const [checkboxes] = useState(init_checkboxes)\n\n    /**\n     * Обработка изменения полей формы\n     */\n    function handleFormChange() {\n        const form = document.querySelector('#form')\n        checkboxes.forEach(checkbox => {\n            checkbox.checked = form[checkbox.name].checked\n        })\n        const count = checkboxes.filter(checkbox => checkbox.checked === true).length\n        if (count === 1) {\n            const checkbox = checkboxes.find(ch => ch.checked === true)\n            form[checkbox.name].disabled = true\n        } else {\n            form.querySelector('[disabled]')?.removeAttribute('disabled')\n        }\n\n        radios.forEach(radio => {\n            radio.checked = form.querySelector(`[value=\"${radio.value}\"]`).checked\n        })\n\n        form.querySelector('button').click()\n    }\n\n    /**\n     * обработка нажатия кнопки\n     * @param e\n     */\n    function handleFormSubmit(e) {\n        e.preventDefault();\n        const string = generateString(checkboxes)\n        const length = radios.find(radio => radio.checked).value\n        setPasswords(generatePasswords(string, length))\n    }\n\n    return (\n        <form id=\"form\"\n              onChange={handleFormChange}\n              onSubmit={handleFormSubmit}>\n            <div className=\"form-body\">\n                <div>\n                    {checkboxes.map(o => <Checkbox key={o.name} checkbox={o}/>)}\n                </div>\n                <div>\n                    {radios.map(o => <Radio key={o.value} radio={o}/>)}\n                </div>\n            </div>\n            <div className=\"form-footer\">\n                <button className=\"btn\"><b>Сгенерировать!</b></button>\n            </div>\n        </form>\n    );\n}\n\n\n\n","import React from \"react\";\n\n/**\n * компонент - один сгенерированный пароль\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nfunction ResultItem(props) {\n\n    const {password, passwords, setPasswords} = props;\n\n    /**\n     * обработка нажатия иконки скопировать у пароля\n     * @param e\n     */\n    function copyPassword(e) {\n        const inputEl = e.target.parentElement.querySelector('input')\n        inputEl.select()\n        document.execCommand('copy')\n        setPasswords(passwords.map(p => {\n            p.copied = (p.password === password.password)\n            return p\n        }))\n    }\n\n    return (\n        <p>\n            <label>\n                <input value={password.password}\n                       style={{width: `${password.password.length}ch`}}\n                       className=\"result__item\"\n                       readOnly/>\n            </label>\n            <img src={password.copied ? \"icons/done.svg\" : \"icons/copy.svg\"}\n                 alt={password.copied ? \"готово!\" : \"копировать!\"}\n                 title={password.copied ? \"готово!\" : \"копировать!\"}\n                 onClick={copyPassword} />\n        </p>\n    )\n}\n\nexport default ResultItem","import React from 'react'\nimport ResultItem from './ResultItem'\n\n/**\n * компонент - блок со сгенерированными паролями\n * @param props\n * @constructor\n */\nexport default function Result(props) {\n    const {passwords, setPasswords} = props;\n    return (\n        <div id=\"result\">\n            {\n                passwords.map(password =>\n                    <ResultItem key={password.password}\n                                password={password}\n                                passwords={passwords}\n                                setPasswords={setPasswords}/>\n                )\n            }\n        </div>\n    )\n}\n\n\n\n","import '../style.css';\nimport Form from \"./Form\";\nimport Result from \"./Result\";\nimport React, {useState} from \"react\";\nimport {generatePasswords} from \"../lib/functions\";\n\n\n/**\n * Корневой компонент приложения\n * @returns {JSX.Element}\n * @constructor\n */\nfunction App() {\n\n    const [passwords, setPasswords] = useState(generatePasswords());\n\n    return (\n        <section>\n            <Form setPasswords={setPasswords}/>\n            <Result passwords={passwords}\n                    setPasswords={setPasswords}/>\n        </section>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\nwindow.addEventListener('load', () => {\n    if ('serviceWorker' in navigator){\n        navigator.serviceWorker.register('./sw.js')\n            .then(registration => {\n                console.log('Service worker successfully registered', registration);\n            })\n            .catch(error => {\n                console.log('Service worker registration failed', error);\n            });\n    }\n});"],"sourceRoot":""}